{"version":3,"sources":["BooksAPI.js","book.js","search.js","shelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","Book","_this","this","react_default","a","createElement","className","style","width","height","backgroundImage","props","image","value","onChange","e","updateShelf","target","disabled","title","autor","Component","Search","state","query","result","_this2","setState","length","data","books","BooksAPI","catch","_this3","react_router_dom","to","type","placeholder","updateQuery","map","bookOnShelf","booksFromMainPage","find","b","imageLinks","thumbnail","authors","src_book","key","Shelf","Books","Shelves","BooksApp","showSVG","time","getAllBooks","Promise","resolve","setTimeout","hideSVG","response","xmlns","viewBox","cx","cy","r","fill","d","react_router","exact","path","render","f","src_shelf","src_search","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.047439ad.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\nimport { Component } from 'react';\n\nclass Book extends Component {\n    render() {\n        return (\n            <li>\n                <div className=\"book\">\n                    <div className=\"book-top\">\n                        <div\n                            className=\"book-cover\"\n                            style={{\n                                width: 128,\n                                height: 193,\n                                backgroundImage: `url(${this.props.image})`,\n                            }}\n                        />\n                        <div className=\"book-shelf-changer\">\n                            <select\n                                value={this.props.value}\n                                onChange={(e) => {\n                                    this.props.updateShelf(\n                                        this.props.Book,\n                                        e.target.value\n                                    );\n                                }}\n                            >\n                                <option value=\"move\" disabled>\n                                    Move to...\n                                </option>\n                                <option value=\"currentlyReading\">\n                                    Currently Reading\n                                </option>\n                                <option value=\"wantToRead\">Want to Read</option>\n                                <option value=\"read\">Read</option>\n                                <option value=\"none\">None</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"book-title\">{this.props.title}</div>\n                    <div className=\"book-authors\">{this.props.autor}</div>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default Book;","import React from 'react';\nimport { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport Book from './book';\nimport { Link } from 'react-router-dom';\n\nclass Search extends Component {\n    state = {\n        query: '',\n        result: [],\n    };\n    updateQuery(query) {\n        this.setState({ query: query });\n        if (query.length > 0) {\n            BooksAPI.search(query)\n                .then((data) => {\n                    if (typeof data !== 'undefined' && data.length > 0) {\n                        this.setState({ result: data });\n                    }\n                })\n                .catch(this.setState({ result: [] }));\n        } else {\n            this.setState({ result: [] });\n        }\n    }\n    render() {\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to=\"/\" className=\"close-search\">\n                        Close\n                    </Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by title or author\"\n                            value={this.state.query}\n                            onChange={(e) => {\n                                this.updateQuery(e.target.value);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\" />\n                    {this.state.result.map((e) => {\n                        let bookOnShelf = this.props.booksFromMainPage.find(\n                            (b) => b.id === e.id\n                        );\n                        if (bookOnShelf) {\n                            e.shelf = bookOnShelf.shelf;\n                        } else {\n                            e.shelf = 'none';\n                        }\n                        return (\n                            e.title &&\n                            e.imageLinks &&\n                            e.imageLinks.thumbnail &&\n                            e.authors && (\n                                <Book\n                                    key={e.id}\n                                    Book={e}\n                                    updateShelf={this.props.updateShelf}\n                                    title={e.title}\n                                    image={e.imageLinks.thumbnail}\n                                    autor={e.authors}\n                                    value={e.shelf}\n                                />\n                            )\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Search;","// eslint-disable-next-line no-unused-vars\nimport Book from './book';\nimport React, { Component } from 'react';\n\nclass Shelf extends Component {\n    render() {\n        return (\n            <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">{this.props.title}</h2>\n                <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">{this.props.Books}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Shelf;","import React from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport Book from './book';\nimport Search from './search';\nimport Shelf from './shelf';\nimport { Link } from 'react-router-dom';\nimport { Route } from 'react-router';\n\nconst Shelves = [\n    { title: 'Currently reading', value: 'currentlyReading' },\n    { title: 'Want to read', value: 'wantToRead' },\n    { title: 'Read', value: 'read' },\n];\n\nclass BooksApp extends React.Component {\n    state = {\n        books: [],\n        showSVG: false,\n    };\n\n    getAllBooks() {\n        BooksAPI.getAll().then((response) => {\n            this.setState({ books: response });\n        });\n    }\n    componentDidMount() {\n        this.getAllBooks();\n    }\n    updateShelf = (book, shelf) => {\n        BooksAPI.update(book, shelf).then(() => {\n            this.getAllBooks();\n            this.showSVG();\n            sleep(2500).then(() => {\n                // Do something after the sleep!\n                this.hideSVG();\n            });\n        });\n    };\n    showSVG = () => {\n        this.setState({\n            showSVG: true,\n        });\n    };\n    hideSVG = () => {\n        this.setState({\n            showSVG: false,\n        });\n    };\n    render() {\n        if (this.state.showSVG) {\n            return (\n                <div className=\"success-animation\">\n                    <svg\n                        className=\"checkmark\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 52 52\"\n                    >\n                        <circle\n                            className=\"checkmark__circle\"\n                            cx=\"26\"\n                            cy=\"26\"\n                            r=\"25\"\n                            fill=\"none\"\n                        />\n                        <path\n                            className=\"checkmark__check\"\n                            fill=\"none\"\n                            d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"\n                        />\n                    </svg>\n                </div>\n            );\n        }\n        return (\n            <div className=\"app\">\n                <Route\n                    exact\n                    path=\"/\"\n                    render={() => (\n                        <div className=\"list-books\">\n                            <div className=\"list-books-title\">\n                                <h1>MyReads</h1>\n                            </div>\n                            \n                            <div className=\"list-books-content\">\n                                <div>\n                                    {Shelves.map((f) => {\n                                        return (\n                                            <Shelf\n                                                key={f.title}\n                                                title={f.title}\n                                                Books={this.state.books.map(\n                                                    // eslint-disable-next-line array-callback-return\n                                                    (e) => {\n                                                        if (\n                                                            e.shelf === f.value\n                                                        ) {\n                                                            return (\n                                                                <Book\n                                                                    key={e.id}\n                                                                    Book={e}\n                                                                    updateShelf={\n                                                                        this\n                                                                            .updateShelf\n                                                                    }\n                                                                    title={\n                                                                        e.title\n                                                                    }\n                                                                    image={\n                                                                        e\n                                                                            .imageLinks\n                                                                            .thumbnail\n                                                                    }\n                                                                    autor={\n                                                                        e.authors\n                                                                    }\n                                                                    value={\n                                                                        e.shelf\n                                                                    }\n                                                                />\n                                                            );\n                                                        }\n                                                    }\n                                                )}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                            <div className=\"open-search\">\n                                <Link to=\"/search\" id=\"button\">\n                                    Add book\n                                </Link>\n                            </div>\n                        </div>\n                    )}\n                />\n                <Route\n                    exact\n                    path=\"/search\"\n                    render={() => (\n                        <Search\n                            updateShelf={this.updateShelf}\n                            booksFromMainPage={this.state.books}\n                        />\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nfunction sleep(time) {\n    return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nexport default BooksApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);"],"sourceRoot":""}